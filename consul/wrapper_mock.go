// Code generated by MockGen. DO NOT EDIT.
// Source: wrapper.go

// Package consul is a generated GoMock package.
package consul

import (
	gomock "github.com/golang/mock/gomock"
	api "github.com/hashicorp/consul/api"
	reflect "reflect"
)

// MockWrapper is a mock of Wrapper interface
type MockWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockWrapperMockRecorder
}

// MockWrapperMockRecorder is the mock recorder for MockWrapper
type MockWrapperMockRecorder struct {
	mock *MockWrapper
}

// NewMockWrapper creates a new mock instance
func NewMockWrapper(ctrl *gomock.Controller) *MockWrapper {
	mock := &MockWrapper{ctrl: ctrl}
	mock.recorder = &MockWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWrapper) EXPECT() *MockWrapperMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockWrapper) Register(r *api.AgentServiceRegistration) error {
	ret := m.ctrl.Call(m, "Register", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockWrapperMockRecorder) Register(r interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockWrapper)(nil).Register), r)
}

// AliveServiceNameByTag mocks base method
func (m *MockWrapper) AliveServiceNameByTag(arg0 string) ([]string, error) {
	ret := m.ctrl.Call(m, "AliveServiceNameByTag", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AliveServiceNameByTag indicates an expected call of AliveServiceNameByTag
func (mr *MockWrapperMockRecorder) AliveServiceNameByTag(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AliveServiceNameByTag", reflect.TypeOf((*MockWrapper)(nil).AliveServiceNameByTag), arg0)
}

// Deregister mocks base method
func (m *MockWrapper) Deregister() error {
	ret := m.ctrl.Call(m, "Deregister")
	ret0, _ := ret[0].(error)
	return ret0
}

// Deregister indicates an expected call of Deregister
func (mr *MockWrapperMockRecorder) Deregister() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deregister", reflect.TypeOf((*MockWrapper)(nil).Deregister))
}
