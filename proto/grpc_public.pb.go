// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/grpc_public.proto

package counter

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("proto/grpc_public.proto", fileDescriptor_ba947ab954052954) }

var fileDescriptor_ba947ab954052954 = []byte{
	// 154 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0x2f, 0x2a, 0x48, 0x8e, 0x2f, 0x28, 0x4d, 0xca, 0xc9, 0x4c, 0xd6, 0x03, 0x8b,
	0x08, 0xb1, 0x27, 0xe7, 0x97, 0xe6, 0x95, 0xa4, 0x16, 0x49, 0xc9, 0xa4, 0xe7, 0xe7, 0xa7, 0xe7,
	0xa4, 0xea, 0x27, 0x16, 0x64, 0xea, 0x27, 0xe6, 0xe5, 0xe5, 0x97, 0x24, 0x96, 0x64, 0xe6, 0xe7,
	0x15, 0x43, 0x94, 0x49, 0x09, 0x41, 0xf4, 0x27, 0xe7, 0xe7, 0xe6, 0xe6, 0xe7, 0x41, 0xc4, 0x8c,
	0xa2, 0xb9, 0x78, 0x9d, 0x21, 0x9a, 0x03, 0xc0, 0x26, 0x0a, 0x79, 0x71, 0xb1, 0x83, 0x05, 0xc2,
	0x0c, 0x85, 0x44, 0xf5, 0xa0, 0xe6, 0xea, 0xb9, 0xe6, 0x16, 0x94, 0x54, 0xfa, 0xa6, 0x16, 0x17,
	0x27, 0xa6, 0xa7, 0x4a, 0x61, 0x17, 0x56, 0x12, 0x6c, 0xba, 0xfc, 0x64, 0x32, 0x13, 0xb7, 0x10,
	0xa7, 0x7e, 0x99, 0xa1, 0x3e, 0x58, 0x45, 0x12, 0x1b, 0xd8, 0x0e, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x25, 0x96, 0xe2, 0x58, 0xb9, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CounterPublicClient is the client API for CounterPublic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CounterPublicClient interface {
	CountV1(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
}

type counterPublicClient struct {
	cc *grpc.ClientConn
}

func NewCounterPublicClient(cc *grpc.ClientConn) CounterPublicClient {
	return &counterPublicClient{cc}
}

func (c *counterPublicClient) CountV1(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/counter.CounterPublic/CountV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CounterPublicServer is the server API for CounterPublic service.
type CounterPublicServer interface {
	CountV1(context.Context, *EmptyMessage) (*EmptyMessage, error)
}

// UnimplementedCounterPublicServer can be embedded to have forward compatible implementations.
type UnimplementedCounterPublicServer struct {
}

func (*UnimplementedCounterPublicServer) CountV1(ctx context.Context, req *EmptyMessage) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountV1 not implemented")
}

func RegisterCounterPublicServer(s *grpc.Server, srv CounterPublicServer) {
	s.RegisterService(&_CounterPublic_serviceDesc, srv)
}

func _CounterPublic_CountV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterPublicServer).CountV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counter.CounterPublic/CountV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterPublicServer).CountV1(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _CounterPublic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "counter.CounterPublic",
	HandlerType: (*CounterPublicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountV1",
			Handler:    _CounterPublic_CountV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/grpc_public.proto",
}
